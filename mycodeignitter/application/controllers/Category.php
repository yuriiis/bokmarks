<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Category extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Category_model');
        $this->load->library('ion_auth');
        if (!$this->ion_auth->logged_in())
        {redirect('auth/login');}
    }

    /*
     * Listing of category
     */
    function index()
    {
        $user = $this->ion_auth->user()->row();
        $data['category'] = $this->Category_model->get_all_category_one_user($user->id);


        $data['user_id'] = $user->id;
        $data['user_email'] = $user->email;
        $data['_view'] = 'category/index';
        $this->load->view('layouts/main_category',$data);
    }

    /*
     * Adding a new category
     */
    function add()
    {
      $user = $this->ion_auth->user()->row();

      $this->load->library('form_validation');
      $this->form_validation->set_rules('category_name','Category Name','required');

  if($this->form_validation->run())
      {

            $params = array(
				'user_id' => $user->id,
				'category_name' => $this->input->post('category_name'),
				'description' => $this->input->post('description'),
        'stattus' => $this->input->post('stattus'),
      //  'hcode' => $this->encryption->encrypt($hcode)

            );

            $category_id = $this->Category_model->add_category($params);

            $hcode=$category_id.$user->id.$user->email ;
            $short_url=substr(md5($hcode.mt_rand()),0,10);
            //echo  $user->email;
            //echo  $user->id;
            //echo  $category_id;
          //  echo  $short_url;

            $params_short_url = array(
              'hcode' => $short_url,

            );

            $this->Category_model->update_category($category_id,$params_short_url);
            redirect('category/index');
        }
        else
        {
            $data['user_id'] = $user->id;
            $data['user_email'] = $user->email;
            $data['_view'] = 'category/add';
            $this->load->view('layouts/main_add_edit',$data);
        }
    }

    /*
     * Editing a category
     */
    function edit($id)
    {
        $user = $this->ion_auth->user()->row();
        // check if the category exists before trying to edit it
        $data['category'] = $this->Category_model->get_category($id,$user->id);

        if(isset($data['category']['id']))
        {
          $this->load->library('form_validation');
          $this->form_validation->set_rules('category_name','Category Name','required');

    if($this->form_validation->run())
          {
                $params = array(
					'user_id' => $user->id,
					'category_name' => $this->input->post('category_name'),
					'description' => $this->input->post('description'),
          'stattus' => $this->input->post('stattus')
                );

                $this->Category_model->update_category($id,$params);
                redirect('category/index');
            }
            else
            {

                $data['user_id'] = $user->id;
                $data['user_email'] = $user->email;
                $data['_view'] = 'category/edit';
                $this->load->view('layouts/main_add_edit',$data);
            }
        }
        else
            show_error('The category you are trying to edit does not exist.');
    }

    /*
     * Deleting category
     */
    function remove($id)
    {

        $user = $this->ion_auth->user()->row();
        $category = $this->Category_model->get_category($id,$user->id);

        // check if the category exists before trying to delete it
        if(isset($category['id']))
        {
            $this->Category_model->delete_category($id);
            redirect('category/index');
        }
        else
            show_error('The category you are trying to delete does not exist.');
    }

}
