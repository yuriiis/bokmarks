<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Book extends CI_Controller{
    function __construct()
    {
        parent::__construct();


        $this->load->library('ion_auth');
        if (!$this->ion_auth->logged_in())
        {redirect('auth/login');}

        $this->load->model('Book_model');
        //$user = $this->ion_auth->user()->row();

    }

    /*
     * Listing of book
     */
    function index()
    {
        //
        $user = $this->ion_auth->user()->row();
        //подгрузили модель категорий
        $this->load->model('Category_model');

        $data['book'] = $this->Book_model->get_all_book_one_user($user->id);
        $data['category'] = $this->Category_model->get_all_category_one_user($user->id);


        $data['user_id'] = $user->id;
        $data['user_email'] = $user->email;
        $data['_view'] = 'book/index';
        $this->load->view('layouts/main',$data);
    }



//serch book by id category
function bookserch($id)
{
    //
    $user = $this->ion_auth->user()->row();
    //подгрузили модель категорий
    $this->load->model('Category_model');
    //$data['last_book'] = $this->Book_model->get_last_book_index($user->id);//всего закладок пользователя
    $data['book'] = $this->Book_model->get_all_book_serch_one_user($user->id,$id);
    $data['category'] = $this->Category_model->get_all_category_one_user($user->id);
    $data['one_category'] = $this->Category_model->get_category($id,$user->id);
    $data['user_id'] = $user->id;
    $data['user_email'] = $user->email;
    $data['_view'] = 'book/index_search';
    $this->load->view('layouts/main_search',$data);
}


    /*
     * Adding a new book
     */
    function add()
    {
      //взяли данные пользователя
      $user = $this->ion_auth->user()->row();

      $this->load->library('form_validation');
      $this->form_validation->set_rules('bookmark_name','Bookmark Name','required');
      $this->form_validation->set_rules('url','Url','required');


          if($this->form_validation->run())
          {
        $sorting = $this->Book_model->get_last_book_index($user->id);//всего закладок пользователя
            $params = array(
				'category' => $this->input->post('category'),
				'user_id' => $user->id,
				'bookmark_name' => $this->input->post('bookmark_name'),

				'ulogin' => $this->input->post('ulogin'),
				'upass' => $this->input->post('upass'),

				'color' => $this->input->post('color'),
				'sorting' => $sorting,
				'sortingcat' => $sorting,
				'description' => $this->input->post('description'),
				'url' => $this->input->post('url'),
            );

            $book_id = $this->Book_model->add_book($params);
            redirect('book/index');
        }
        else
        {
			$this->load->model('Category_model');
			     $data['all_category'] = $this->Category_model->get_all_category_one_user($user->id);
           $data['_view'] = 'book/add';
           $data['user_id'] = $user->id;
           $data['user_email'] = $user->email;

      $this->load->view('layouts/main_add_edit',$data);
        }
    }

    /*
     * Editing a book
     */
    function edit($id)
    {


        //взяли данные пользователя
        $user = $this->ion_auth->user()->row();
        // check if the book exists before trying to edit it
        $data['book'] = $this->Book_model->get_book($id,$user->id);

        if(isset($data['book']['id']))
        {
          $this->load->library('form_validation');
          $this->form_validation->set_rules('bookmark_name','Bookmark Name','required');
          $this->form_validation->set_rules('url','Url','required');

    if($this->form_validation->run())
          {
                $params = array(
					'category' => $this->input->post('category'),
					'user_id' => $user->id,
					'bookmark_name' => $this->input->post('bookmark_name'),

					'ulogin' => $this->input->post('ulogin'),
					'upass' => $this->input->post('upass'),

					'color' => $this->input->post('color'),
					'description' => $this->input->post('description'),
					'url' => $this->input->post('url'),
                );

                $this->Book_model->update_book($id,$params);
                redirect('book/index');
            }
            else
            {
				$this->load->model('Category_model');
				$data['all_category'] = $this->Category_model->get_all_category_one_user($user->id);

                $data['_view'] = 'book/edit';

                $data['user_id'] = $user->id;
                $data['user_email'] = $user->email;

                $this->load->view('layouts/main_add_edit',$data);
            }
        }
        else
            show_error('The book you are trying to edit does not exist.');
    }

    /*
     * Deleting book
     */
    function remove($id)
    {
        $user = $this->ion_auth->user()->row();
        $book = $this->Book_model->get_book($id,$user->id);


        // check if the book exists before trying to delete it
        if(isset($book['id']))
        {
            $this->Book_model->delete_book($id);
            redirect('book/index');
        }
        else
            show_error('The book you are trying to delete does not exist.');
    }




//просмотр закладки

function view($id)
{
    //
    $user = $this->ion_auth->user()->row();
    //подгрузили модель категорий
    $this->load->model('Category_model');
    $data['book'] = $this->Book_model->get_book($id,$user->id);


    if(isset($data['book']['id']))
    {
      $this->load->model('Category_model');
      $data['category'] = $this->Category_model->get_category($data['book']['category'],$user->id);


      $data['user_id'] = $user->id;
      $data['user_email'] = $user->email;
      $data['_view'] = 'book/bookview';
      $this->load->view('layouts/main_vie',$data);
    }
    else
        show_error('The book you are trying to view does not exist.');



}

//просмотр закладки

////////sorting bookmark


function sortbook($id,$sorting)
{
    //взяли данные пользователя
    $user = $this->ion_auth->user()->row();
    // check if the book exists before trying to edit it
    $data['book'] = $this->Book_model->get_book($id,$user->id);

    if(isset($data['book']['id']))
    {

            $params = array(
              'sorting' => $sorting
            );

            $this->Book_model->update_book($id,$params);

    }
        else
        {
          show_error('The book you are trying to edit does not exist.');
        }
}
////////sorting bookmark index

////////sorting bookmark category

function sortbookcategory($id,$sorting)
{
    //взяли данные пользователя
    $user = $this->ion_auth->user()->row();
    // check if the book exists before trying to edit it
    $data['book'] = $this->Book_model->get_book($id,$user->id);

    if(isset($data['book']['id']))
    {

            $params = array(
              'sortingcat' => $sorting
            );

            $this->Book_model->update_book($id,$params);
          //  redirect('book/index');
          //show_error('отработано смотри лог');
    }
        else
        {
          show_error('The book you are trying to edit does not exist.');
        }
}

///sorting bookmark category


}
